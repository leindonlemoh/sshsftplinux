ssh user@example.com (ssh demo@test.rebex.net)


cat ~/.ssh/id_rsa.pub * checks public sshkey*
-p - Specify the port
-i - Use a private key file
-v - Enable verbose mode
-C - Enable compression
-X - Enable X11 forwarding
-o - Specify options directly on the command line

DOWNLOAD
scp demo@test.rebex.net:/pub/example/KeyGenerator.png ~/Downloads/



🔹 Login to a remote server:
ssh user@host

🔹 Navigate directories:
cd foldername, pwd

🔹 List files:
ls -la

🔹 View text file (if supported):
cat file.txt

🔹 Create folder:
mkdir myfolder

🔹 Delete folder:
rm -r myfolder

🔹 Move or rename files:
mv file1.txt file2.txt

🔹 Exit shell:
exit

Create, move, or delete files/folders
Test Goal: Basic file management skills

Example tasks:

🔹Make a new directory:

mkdir test_folder
Copy a file:

cp file1.txt file2.txt

Move/rename a file:
        mv file1.txt file_renamed.txt

        Delete a file/folder:
        rm file.txt
        rm -r old_folder

🔹Transfer files
🔹Test Goal: Can you download/upload using SFTP?

🔹Example tasks:

        🔹Download a file to your local machine:
sftp user@server.com
get readme.txt
exit


🔹Upload a file:
put myscript.sh


| **Action**                     | **SSH (Linux shell)**       | **SFTP**                                   | **Linux Commands (local PC)**               |
| ------------------------------ | --------------------------- | ------------------------------------------ | ------------------------------------------- |
| **1️⃣ Login**                  | `ssh user@host`             | `sftp user@host`                           | Open terminal locally                       |
| **2️⃣ Show list of files**     | `ls -la`                    | `ls`                                       | `ls` (on local PC)                          |
| **3️⃣ Show current directory** | `pwd`                       | `pwd` (shows remote path)                  | `pwd`                                       |
| **4️⃣ Open a folder**          | `cd foldername`             | `cd foldername`                            | `cd foldername`                             |
| **5️⃣ Create new folder**      | `mkdir new_folder`          | ❌ Not supported (SFTP cannot make folders) | `mkdir new_folder`                          |
| **6️⃣ Delete folder**          | `rm -r foldername`          | ❌ Not supported                            | `rm -r foldername`                          |
| **7️⃣ Download a file**        | ❌ Not directly (need `scp`) | `get file.txt`                             | `scp user@host:/path/file.txt ./Downloads/` |
| **8️⃣ Show directory again**   | `ls -la`                    | `ls`                                       | `ls`                                        |
| **9️⃣ Exit**                   | `exit`                      | `exit`                                     | `exit` or close terminal                    |


 🔹Generate a new SSH key

            ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

🔹Replace "your_email@example.com" with your real email.
🔹This creates a 4096-bit RSA key, which is secure.

        When prompted:
    🔹Enter file in which to save the key (/home/you/.ssh/id_rsa):
👉 Just press Enter to use the default location (~/.ssh/id_rsa), or type a different filename if you want.

🔹For passphrase:

🔹You can add one (extra security) or press Enter for none.

🔹📂 Result
🔹This creates two files in ~/.ssh:

🔹File	Purpose
            id_rsa	Private key (keep secret) 🔒
            id_rsa.pub	Public key (safe to share) 📤

🖇️ Step 2: Add your SSH key to the agent
🔹Start the SSH agent:

            eval "$(ssh-agent -s)"

🔹Add your private key:
            ssh-add ~/.ssh/id_rsa
📋 Step 3: View your public key
    Print it to the terminal:

            cat ~/.ssh/id_rsa.pub

Copy the output. You’ll use it to give access to remote servers.
🚀 Step 4: Test your new key
Try connecting to a server with:

                ssh -i ~/.ssh/id_rsa user@host